// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// SubscriptionsGetParams is parameters of GET /subscriptions operation.
type SubscriptionsGetParams struct {
	// Filter by user IDs (comma-separated).
	UserIds []uuid.UUID
	// Filter by service names (comma-separated).
	ServiceNames []string
	// Filter by start date (MM-YYYY) from.
	StartDateFrom OptString
	// Filter by start date (MM-YYYY) to.
	StartDateTo OptString
	// Page number for pagination.
	Page OptInt
	// Number of items per page.
	Limit OptInt
}

func unpackSubscriptionsGetParams(packed middleware.Parameters) (params SubscriptionsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "user_ids",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserIds = v.([]uuid.UUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "service_names",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ServiceNames = v.([]string)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start_date_from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartDateFrom = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start_date_to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartDateTo = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	return params
}

func decodeSubscriptionsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params SubscriptionsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: user_ids.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "user_ids",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotUserIdsVal uuid.UUID
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUUID(val)
						if err != nil {
							return err
						}

						paramsDotUserIdsVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.UserIds = append(params.UserIds, paramsDotUserIdsVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_ids",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: service_names.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "service_names",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotServiceNamesVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotServiceNamesVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ServiceNames = append(params.ServiceNames, paramsDotServiceNamesVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service_names",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start_date_from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_date_from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartDateFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStartDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartDateFrom.SetTo(paramsDotStartDateFromVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.StartDateFrom.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        regexMap["^\\d{2}-\\d{4}$"],
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_date_from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start_date_to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_date_to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartDateToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStartDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartDateTo.SetTo(paramsDotStartDateToVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.StartDateTo.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     false,
							Regex:        regexMap["^\\d{2}-\\d{4}$"],
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_date_to",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(20)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           100,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SubscriptionsIDDeleteParams is parameters of DELETE /subscriptions/{id} operation.
type SubscriptionsIDDeleteParams struct {
	// Subscription ID.
	ID uuid.UUID
}

func unpackSubscriptionsIDDeleteParams(packed middleware.Parameters) (params SubscriptionsIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeSubscriptionsIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params SubscriptionsIDDeleteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SubscriptionsIDGetParams is parameters of GET /subscriptions/{id} operation.
type SubscriptionsIDGetParams struct {
	// Subscription ID.
	ID uuid.UUID
}

func unpackSubscriptionsIDGetParams(packed middleware.Parameters) (params SubscriptionsIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeSubscriptionsIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params SubscriptionsIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SubscriptionsIDPatchParams is parameters of PATCH /subscriptions/{id} operation.
type SubscriptionsIDPatchParams struct {
	// Subscription ID.
	ID uuid.UUID
}

func unpackSubscriptionsIDPatchParams(packed middleware.Parameters) (params SubscriptionsIDPatchParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeSubscriptionsIDPatchParams(args [1]string, argsEscaped bool, r *http.Request) (params SubscriptionsIDPatchParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SubscriptionsIDPutParams is parameters of PUT /subscriptions/{id} operation.
type SubscriptionsIDPutParams struct {
	// Subscription ID.
	ID uuid.UUID
}

func unpackSubscriptionsIDPutParams(packed middleware.Parameters) (params SubscriptionsIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeSubscriptionsIDPutParams(args [1]string, argsEscaped bool, r *http.Request) (params SubscriptionsIDPutParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SubscriptionsSummaryTotalCostGetParams is parameters of GET /subscriptions/summary/total-cost operation.
type SubscriptionsSummaryTotalCostGetParams struct {
	// Start date in MM-YYYY format.
	StartDate string
	// End date in MM-YYYY format.
	EndDate string
	// Comma-separated list of user IDs to filter by user id.
	UserIds []uuid.UUID
	// Comma-separated list of service names to filter by service names.
	ServiceNames []string
}

func unpackSubscriptionsSummaryTotalCostGetParams(packed middleware.Parameters) (params SubscriptionsSummaryTotalCostGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "start_date",
			In:   "query",
		}
		params.StartDate = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "end_date",
			In:   "query",
		}
		params.EndDate = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "user_ids",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserIds = v.([]uuid.UUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "service_names",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ServiceNames = v.([]string)
		}
	}
	return params
}

func decodeSubscriptionsSummaryTotalCostGetParams(args [0]string, argsEscaped bool, r *http.Request) (params SubscriptionsSummaryTotalCostGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: start_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StartDate = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{2}-\\d{4}$"],
				}).Validate(string(params.StartDate)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_date",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.EndDate = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{2}-\\d{4}$"],
				}).Validate(string(params.EndDate)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end_date",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: user_ids.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "user_ids",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotUserIdsVal uuid.UUID
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUUID(val)
						if err != nil {
							return err
						}

						paramsDotUserIdsVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.UserIds = append(params.UserIds, paramsDotUserIdsVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user_ids",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: service_names.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "service_names",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotServiceNamesVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotServiceNamesVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ServiceNames = append(params.ServiceNames, paramsDotServiceNamesVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service_names",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
