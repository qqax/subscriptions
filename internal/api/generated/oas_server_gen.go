// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// SubscriptionsGet implements GET /server operation.
	//
	// Retrieve server with optional filtering and pagination.
	//
	// GET /server
	SubscriptionsGet(ctx context.Context, params SubscriptionsGetParams) (SubscriptionsGetRes, error)
	// SubscriptionsIDDelete implements DELETE /server/{id} operation.
	//
	// Delete a subscription record.
	//
	// DELETE /server/{id}
	SubscriptionsIDDelete(ctx context.Context, params SubscriptionsIDDeleteParams) (SubscriptionsIDDeleteRes, error)
	// SubscriptionsIDGet implements GET /server/{id} operation.
	//
	// Retrieve a specific subscription by its ID.
	//
	// GET /server/{id}
	SubscriptionsIDGet(ctx context.Context, params SubscriptionsIDGetParams) (SubscriptionsIDGetRes, error)
	// SubscriptionsIDPatch implements PATCH /server/{id} operation.
	//
	// Partially update a subscription record.
	//
	// PATCH /server/{id}
	SubscriptionsIDPatch(ctx context.Context, req *SubscriptionPatch, params SubscriptionsIDPatchParams) (SubscriptionsIDPatchRes, error)
	// SubscriptionsIDPut implements PUT /server/{id} operation.
	//
	// Fully update a subscription record.
	//
	// PUT /server/{id}
	SubscriptionsIDPut(ctx context.Context, req *SubscriptionUpdate, params SubscriptionsIDPutParams) (SubscriptionsIDPutRes, error)
	// SubscriptionsPost implements POST /server operation.
	//
	// Create a new subscription record for a user.
	//
	// POST /server
	SubscriptionsPost(ctx context.Context, req *SubscriptionCreate) (SubscriptionsPostRes, error)
	// SubscriptionsSummaryTotalCostGet implements GET /server/summary/total-cost operation.
	//
	// Calculate total cost of server for selected period with filtering.
	//
	// GET /server/summary/total-cost
	SubscriptionsSummaryTotalCostGet(ctx context.Context, params SubscriptionsSummaryTotalCostGetParams) (SubscriptionsSummaryTotalCostGetRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
