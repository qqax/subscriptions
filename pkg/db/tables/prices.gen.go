// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package tables

import (
	"context"
	"database/sql"
	"subscription/internal/adapters/db/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPrice(db *gorm.DB, opts ...gen.DOOption) price {
	_price := price{}

	_price.priceDo.UseDB(db, opts...)
	_price.priceDo.UseModel(&models.Price{})

	tableName := _price.priceDo.TableName()
	_price.ALL = field.NewAsterisk(tableName)
	_price.Date = field.NewTime(tableName, "date")
	_price.ID = field.NewUint(tableName, "id")
	_price.ServiceID = field.NewUint(tableName, "service_id")
	_price.MonthlyPrice = field.NewFloat64(tableName, "monthly_price")
	_price.Service = priceBelongsToService{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Service", "models.Service"),
		Subscriptions: struct {
			field.RelationField
			Service struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Service.Subscriptions", "models.Subscription"),
			Service: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Service.Subscriptions.Service", "models.Service"),
			},
		},
	}

	_price.fillFieldMap()

	return _price
}

type price struct {
	priceDo

	ALL          field.Asterisk
	Date         field.Time
	ID           field.Uint
	ServiceID    field.Uint
	MonthlyPrice field.Float64
	Service      priceBelongsToService

	fieldMap map[string]field.Expr
}

func (p price) Table(newTableName string) *price {
	p.priceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p price) As(alias string) *price {
	p.priceDo.DO = *(p.priceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *price) updateTableName(table string) *price {
	p.ALL = field.NewAsterisk(table)
	p.Date = field.NewTime(table, "date")
	p.ID = field.NewUint(table, "id")
	p.ServiceID = field.NewUint(table, "service_id")
	p.MonthlyPrice = field.NewFloat64(table, "monthly_price")

	p.fillFieldMap()

	return p
}

func (p *price) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *price) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["date"] = p.Date
	p.fieldMap["id"] = p.ID
	p.fieldMap["service_id"] = p.ServiceID
	p.fieldMap["monthly_price"] = p.MonthlyPrice

}

func (p price) clone(db *gorm.DB) price {
	p.priceDo.ReplaceConnPool(db.Statement.ConnPool)
	p.Service.db = db.Session(&gorm.Session{Initialized: true})
	p.Service.db.Statement.ConnPool = db.Statement.ConnPool
	return p
}

func (p price) replaceDB(db *gorm.DB) price {
	p.priceDo.ReplaceDB(db)
	p.Service.db = db.Session(&gorm.Session{})
	return p
}

type priceBelongsToService struct {
	db *gorm.DB

	field.RelationField

	Subscriptions struct {
		field.RelationField
		Service struct {
			field.RelationField
		}
	}
}

func (a priceBelongsToService) Where(conds ...field.Expr) *priceBelongsToService {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a priceBelongsToService) WithContext(ctx context.Context) *priceBelongsToService {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a priceBelongsToService) Session(session *gorm.Session) *priceBelongsToService {
	a.db = a.db.Session(session)
	return &a
}

func (a priceBelongsToService) Model(m *models.Price) *priceBelongsToServiceTx {
	return &priceBelongsToServiceTx{a.db.Model(m).Association(a.Name())}
}

func (a priceBelongsToService) Unscoped() *priceBelongsToService {
	a.db = a.db.Unscoped()
	return &a
}

type priceBelongsToServiceTx struct{ tx *gorm.Association }

func (a priceBelongsToServiceTx) Find() (result *models.Service, err error) {
	return result, a.tx.Find(&result)
}

func (a priceBelongsToServiceTx) Append(values ...*models.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a priceBelongsToServiceTx) Replace(values ...*models.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a priceBelongsToServiceTx) Delete(values ...*models.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a priceBelongsToServiceTx) Clear() error {
	return a.tx.Clear()
}

func (a priceBelongsToServiceTx) Count() int64 {
	return a.tx.Count()
}

func (a priceBelongsToServiceTx) Unscoped() *priceBelongsToServiceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type priceDo struct{ gen.DO }

type IPriceDo interface {
	gen.SubQuery
	Debug() IPriceDo
	WithContext(ctx context.Context) IPriceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPriceDo
	WriteDB() IPriceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPriceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPriceDo
	Not(conds ...gen.Condition) IPriceDo
	Or(conds ...gen.Condition) IPriceDo
	Select(conds ...field.Expr) IPriceDo
	Where(conds ...gen.Condition) IPriceDo
	Order(conds ...field.Expr) IPriceDo
	Distinct(cols ...field.Expr) IPriceDo
	Omit(cols ...field.Expr) IPriceDo
	Join(table schema.Tabler, on ...field.Expr) IPriceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPriceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPriceDo
	Group(cols ...field.Expr) IPriceDo
	Having(conds ...gen.Condition) IPriceDo
	Limit(limit int) IPriceDo
	Offset(offset int) IPriceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPriceDo
	Unscoped() IPriceDo
	Create(values ...*models.Price) error
	CreateInBatches(values []*models.Price, batchSize int) error
	Save(values ...*models.Price) error
	First() (*models.Price, error)
	Take() (*models.Price, error)
	Last() (*models.Price, error)
	Find() ([]*models.Price, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Price, err error)
	FindInBatches(result *[]*models.Price, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Price) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPriceDo
	Assign(attrs ...field.AssignExpr) IPriceDo
	Joins(fields ...field.RelationField) IPriceDo
	Preload(fields ...field.RelationField) IPriceDo
	FirstOrInit() (*models.Price, error)
	FirstOrCreate() (*models.Price, error)
	FindByPage(offset int, limit int) (result []*models.Price, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPriceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p priceDo) Debug() IPriceDo {
	return p.withDO(p.DO.Debug())
}

func (p priceDo) WithContext(ctx context.Context) IPriceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p priceDo) ReadDB() IPriceDo {
	return p.Clauses(dbresolver.Read)
}

func (p priceDo) WriteDB() IPriceDo {
	return p.Clauses(dbresolver.Write)
}

func (p priceDo) Session(config *gorm.Session) IPriceDo {
	return p.withDO(p.DO.Session(config))
}

func (p priceDo) Clauses(conds ...clause.Expression) IPriceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p priceDo) Returning(value interface{}, columns ...string) IPriceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p priceDo) Not(conds ...gen.Condition) IPriceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p priceDo) Or(conds ...gen.Condition) IPriceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p priceDo) Select(conds ...field.Expr) IPriceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p priceDo) Where(conds ...gen.Condition) IPriceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p priceDo) Order(conds ...field.Expr) IPriceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p priceDo) Distinct(cols ...field.Expr) IPriceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p priceDo) Omit(cols ...field.Expr) IPriceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p priceDo) Join(table schema.Tabler, on ...field.Expr) IPriceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p priceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPriceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p priceDo) RightJoin(table schema.Tabler, on ...field.Expr) IPriceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p priceDo) Group(cols ...field.Expr) IPriceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p priceDo) Having(conds ...gen.Condition) IPriceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p priceDo) Limit(limit int) IPriceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p priceDo) Offset(offset int) IPriceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p priceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPriceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p priceDo) Unscoped() IPriceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p priceDo) Create(values ...*models.Price) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p priceDo) CreateInBatches(values []*models.Price, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p priceDo) Save(values ...*models.Price) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p priceDo) First() (*models.Price, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Price), nil
	}
}

func (p priceDo) Take() (*models.Price, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Price), nil
	}
}

func (p priceDo) Last() (*models.Price, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Price), nil
	}
}

func (p priceDo) Find() ([]*models.Price, error) {
	result, err := p.DO.Find()
	return result.([]*models.Price), err
}

func (p priceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Price, err error) {
	buf := make([]*models.Price, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p priceDo) FindInBatches(result *[]*models.Price, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p priceDo) Attrs(attrs ...field.AssignExpr) IPriceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p priceDo) Assign(attrs ...field.AssignExpr) IPriceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p priceDo) Joins(fields ...field.RelationField) IPriceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p priceDo) Preload(fields ...field.RelationField) IPriceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p priceDo) FirstOrInit() (*models.Price, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Price), nil
	}
}

func (p priceDo) FirstOrCreate() (*models.Price, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Price), nil
	}
}

func (p priceDo) FindByPage(offset int, limit int) (result []*models.Price, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p priceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p priceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p priceDo) Delete(models ...*models.Price) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *priceDo) withDO(do gen.Dao) *priceDo {
	p.DO = *do.(*gen.DO)
	return p
}
