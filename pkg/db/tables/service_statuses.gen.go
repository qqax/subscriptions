// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package tables

import (
	"context"
	"database/sql"
	"subscription/internal/adapters/db/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newServiceStatus(db *gorm.DB, opts ...gen.DOOption) serviceStatus {
	_serviceStatus := serviceStatus{}

	_serviceStatus.serviceStatusDo.UseDB(db, opts...)
	_serviceStatus.serviceStatusDo.UseModel(&models.ServiceStatus{})

	tableName := _serviceStatus.serviceStatusDo.TableName()
	_serviceStatus.ALL = field.NewAsterisk(tableName)
	_serviceStatus.Date = field.NewTime(tableName, "date")
	_serviceStatus.ID = field.NewUint(tableName, "id")
	_serviceStatus.ServiceID = field.NewUint(tableName, "service_id")
	_serviceStatus.Active = field.NewBool(tableName, "active")
	_serviceStatus.Service = serviceStatusBelongsToService{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Service", "models.Service"),
		Subscriptions: struct {
			field.RelationField
			Service struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Service.Subscriptions", "models.Subscription"),
			Service: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Service.Subscriptions.Service", "models.Service"),
			},
		},
	}

	_serviceStatus.fillFieldMap()

	return _serviceStatus
}

type serviceStatus struct {
	serviceStatusDo

	ALL       field.Asterisk
	Date      field.Time
	ID        field.Uint
	ServiceID field.Uint
	Active    field.Bool
	Service   serviceStatusBelongsToService

	fieldMap map[string]field.Expr
}

func (s serviceStatus) Table(newTableName string) *serviceStatus {
	s.serviceStatusDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceStatus) As(alias string) *serviceStatus {
	s.serviceStatusDo.DO = *(s.serviceStatusDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceStatus) updateTableName(table string) *serviceStatus {
	s.ALL = field.NewAsterisk(table)
	s.Date = field.NewTime(table, "date")
	s.ID = field.NewUint(table, "id")
	s.ServiceID = field.NewUint(table, "service_id")
	s.Active = field.NewBool(table, "active")

	s.fillFieldMap()

	return s
}

func (s *serviceStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceStatus) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["date"] = s.Date
	s.fieldMap["id"] = s.ID
	s.fieldMap["service_id"] = s.ServiceID
	s.fieldMap["active"] = s.Active

}

func (s serviceStatus) clone(db *gorm.DB) serviceStatus {
	s.serviceStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Service.db = db.Session(&gorm.Session{Initialized: true})
	s.Service.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s serviceStatus) replaceDB(db *gorm.DB) serviceStatus {
	s.serviceStatusDo.ReplaceDB(db)
	s.Service.db = db.Session(&gorm.Session{})
	return s
}

type serviceStatusBelongsToService struct {
	db *gorm.DB

	field.RelationField

	Subscriptions struct {
		field.RelationField
		Service struct {
			field.RelationField
		}
	}
}

func (a serviceStatusBelongsToService) Where(conds ...field.Expr) *serviceStatusBelongsToService {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a serviceStatusBelongsToService) WithContext(ctx context.Context) *serviceStatusBelongsToService {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a serviceStatusBelongsToService) Session(session *gorm.Session) *serviceStatusBelongsToService {
	a.db = a.db.Session(session)
	return &a
}

func (a serviceStatusBelongsToService) Model(m *models.ServiceStatus) *serviceStatusBelongsToServiceTx {
	return &serviceStatusBelongsToServiceTx{a.db.Model(m).Association(a.Name())}
}

func (a serviceStatusBelongsToService) Unscoped() *serviceStatusBelongsToService {
	a.db = a.db.Unscoped()
	return &a
}

type serviceStatusBelongsToServiceTx struct{ tx *gorm.Association }

func (a serviceStatusBelongsToServiceTx) Find() (result *models.Service, err error) {
	return result, a.tx.Find(&result)
}

func (a serviceStatusBelongsToServiceTx) Append(values ...*models.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a serviceStatusBelongsToServiceTx) Replace(values ...*models.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a serviceStatusBelongsToServiceTx) Delete(values ...*models.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a serviceStatusBelongsToServiceTx) Clear() error {
	return a.tx.Clear()
}

func (a serviceStatusBelongsToServiceTx) Count() int64 {
	return a.tx.Count()
}

func (a serviceStatusBelongsToServiceTx) Unscoped() *serviceStatusBelongsToServiceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type serviceStatusDo struct{ gen.DO }

type IServiceStatusDo interface {
	gen.SubQuery
	Debug() IServiceStatusDo
	WithContext(ctx context.Context) IServiceStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceStatusDo
	WriteDB() IServiceStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceStatusDo
	Not(conds ...gen.Condition) IServiceStatusDo
	Or(conds ...gen.Condition) IServiceStatusDo
	Select(conds ...field.Expr) IServiceStatusDo
	Where(conds ...gen.Condition) IServiceStatusDo
	Order(conds ...field.Expr) IServiceStatusDo
	Distinct(cols ...field.Expr) IServiceStatusDo
	Omit(cols ...field.Expr) IServiceStatusDo
	Join(table schema.Tabler, on ...field.Expr) IServiceStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceStatusDo
	Group(cols ...field.Expr) IServiceStatusDo
	Having(conds ...gen.Condition) IServiceStatusDo
	Limit(limit int) IServiceStatusDo
	Offset(offset int) IServiceStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceStatusDo
	Unscoped() IServiceStatusDo
	Create(values ...*models.ServiceStatus) error
	CreateInBatches(values []*models.ServiceStatus, batchSize int) error
	Save(values ...*models.ServiceStatus) error
	First() (*models.ServiceStatus, error)
	Take() (*models.ServiceStatus, error)
	Last() (*models.ServiceStatus, error)
	Find() ([]*models.ServiceStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ServiceStatus, err error)
	FindInBatches(result *[]*models.ServiceStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ServiceStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceStatusDo
	Assign(attrs ...field.AssignExpr) IServiceStatusDo
	Joins(fields ...field.RelationField) IServiceStatusDo
	Preload(fields ...field.RelationField) IServiceStatusDo
	FirstOrInit() (*models.ServiceStatus, error)
	FirstOrCreate() (*models.ServiceStatus, error)
	FindByPage(offset int, limit int) (result []*models.ServiceStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceStatusDo) Debug() IServiceStatusDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceStatusDo) WithContext(ctx context.Context) IServiceStatusDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceStatusDo) ReadDB() IServiceStatusDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceStatusDo) WriteDB() IServiceStatusDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceStatusDo) Session(config *gorm.Session) IServiceStatusDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceStatusDo) Clauses(conds ...clause.Expression) IServiceStatusDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceStatusDo) Returning(value interface{}, columns ...string) IServiceStatusDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceStatusDo) Not(conds ...gen.Condition) IServiceStatusDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceStatusDo) Or(conds ...gen.Condition) IServiceStatusDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceStatusDo) Select(conds ...field.Expr) IServiceStatusDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceStatusDo) Where(conds ...gen.Condition) IServiceStatusDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceStatusDo) Order(conds ...field.Expr) IServiceStatusDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceStatusDo) Distinct(cols ...field.Expr) IServiceStatusDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceStatusDo) Omit(cols ...field.Expr) IServiceStatusDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceStatusDo) Join(table schema.Tabler, on ...field.Expr) IServiceStatusDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceStatusDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceStatusDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceStatusDo) Group(cols ...field.Expr) IServiceStatusDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceStatusDo) Having(conds ...gen.Condition) IServiceStatusDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceStatusDo) Limit(limit int) IServiceStatusDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceStatusDo) Offset(offset int) IServiceStatusDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceStatusDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceStatusDo) Unscoped() IServiceStatusDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceStatusDo) Create(values ...*models.ServiceStatus) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceStatusDo) CreateInBatches(values []*models.ServiceStatus, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceStatusDo) Save(values ...*models.ServiceStatus) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceStatusDo) First() (*models.ServiceStatus, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceStatus), nil
	}
}

func (s serviceStatusDo) Take() (*models.ServiceStatus, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceStatus), nil
	}
}

func (s serviceStatusDo) Last() (*models.ServiceStatus, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceStatus), nil
	}
}

func (s serviceStatusDo) Find() ([]*models.ServiceStatus, error) {
	result, err := s.DO.Find()
	return result.([]*models.ServiceStatus), err
}

func (s serviceStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ServiceStatus, err error) {
	buf := make([]*models.ServiceStatus, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceStatusDo) FindInBatches(result *[]*models.ServiceStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceStatusDo) Attrs(attrs ...field.AssignExpr) IServiceStatusDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceStatusDo) Assign(attrs ...field.AssignExpr) IServiceStatusDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceStatusDo) Joins(fields ...field.RelationField) IServiceStatusDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceStatusDo) Preload(fields ...field.RelationField) IServiceStatusDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceStatusDo) FirstOrInit() (*models.ServiceStatus, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceStatus), nil
	}
}

func (s serviceStatusDo) FirstOrCreate() (*models.ServiceStatus, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ServiceStatus), nil
	}
}

func (s serviceStatusDo) FindByPage(offset int, limit int) (result []*models.ServiceStatus, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceStatusDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceStatusDo) Delete(models ...*models.ServiceStatus) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceStatusDo) withDO(do gen.Dao) *serviceStatusDo {
	s.DO = *do.(*gen.DO)
	return s
}
